collect_reduce.h
Major changes

In quicksort, transpose, bucket_sort, sample_sort
Fixed sort since it was core dumping due to double free, but no longer supports non-relocatable types, need to figure out a compromise that is fast and correct
all changes marked as "tmpfix in comments".

io.h
by default it now does not null terminate chars_from_file 
updated so can separately compile

file_map.h
added inline to swap so can separately compile

sequence_ops.h
added granularity to tabulate

primitives.h
got rid of const in map_tokens so function can modify the input string in place -> &&
fixed type of out to && in pack_into 
fixed a bug in map_split_at (missing +1, and n for m)

sequence.h
passing granularity in from_function -- then changed it to 0 from 1000
added clear_uninitialized
added granularity in some parallel_fors
added special case for is_small in copy constructor

utilities.h
put in copy_memory with include string.h for now until sort is fixed

alloc.h
added p_alloc, p_free (just alloc and free ussing parlay allocator)

posix/file_map_impl_posix.h
fixed assert around fstat


Todo:
Sequences:
- better granularity control in parallel_fors in sequence.h
- push_back seems slower than std::vector with gcc on smallish vectors (did not try on
large).   Could be due to the granularity control, but also seems like gcc uses a factor of 2 instead of 1.5.   Perhaps take advantage of the parlay allocator sizes, which are powers of 2, i.e. even if you allocate less, it will round up.
- add += to be consistent with string, perhaps also length, replace, substr (subseq?), compare.  String also has copy, find, rfind, find_{first,last}_[not_]of.   What about + for append, and the relational operators?  Seems like c_str would be hard (impossible?) without zero padding. 
